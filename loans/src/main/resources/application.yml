server:
  port: 8090
spring:
  application:
    name: "loans"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3307/loansdb
    username: root
    password: root
# Here we ensure that the sql table scripts are always initialized on startup
  sql:
    init:
      mode: always
  jpa:
    show-sql: true
# Config server address for app to contact
# This URL will be used to contact config server to request for latest config from git
# This is initiated on MS startup by the spring cloud config client dependency present in the app MS
# Works based on two props -> application name, profiles active
  config:
    import: "optional:configserver:http://localhost:8071/"
# Config details to connect to rabbit messaging queue
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"
# management API endpoints are specific endpoints provided by spring and
# utilized via actuator which exposes them for use.
# One function is to perform refresh of configuration read from git post a change
# without having to restart the microservice
management:
  endpoints:
    web:
      exposure:
        include: "*"