server:
  port: 9000
spring:
  application:
    name: "cards"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3308/cardsdb
    username: root
    password: root
# Here we ensure that the sql table scripts are always initialized on startup
  sql:
    init:
      mode: always
  jpa:
    show-sql: true
# Config server address for app to contact
# This URL will be used to contact config server to request for latest config from git
# This is initiated on MS startup by the spring cloud config client dependency present in the app MS
# Works based on two props -> application name, profiles active
  config:
    import: "optional:configserver:http://localhost:8071/"
# Config details to connect to rabbit messaging queue
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"
# root binder to kafka
  kafka:
    bootstrap-servers: localhost:9092
# Config details for circuitbreaker to work for openfeign in accounts
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: processCardNotificationStatus
    stream:
      binders:
        kafka:
          type: kafka
      bindings:
        processCardNotificationStatus-in-0:
          destination: update-card-notification-topic
          binder: kafka
          group: ${spring.application.name}
        send-card-notification-out-0:
          destination: send-card-notification-topic
          binder: kafka
          group: ${spring.application.name}
# management API endpoints are specific endpoints provided by spring and
# utilized via actuator which exposes them for use.
# One function is to perform refresh of configuration read from git post a change
# without having to restart the microservice
management:
  endpoints:
    web:
      exposure:
        include: "*"
# enable acutator to expose info url
  info:
    env:
      enabled: true
# enable shutdown url of microservice
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
# Micrometer configuration to monitor app health
  metrics:
    logs:
      application: ${spring.application.name}


# enable shutdown mechanism
endpoints:
  shutdown:
    enabled: true

# eureka props
eureka:
  instance:
    # This property defines this microservice dynamically wrt Ip address when comms with other ms
    # Since this is not localhost but rather the cards microservice instance that we are referring here
    preferIpAddress: true
  client:
    # We require registry details of all microservices for comms
    fetchRegistry : true
    # We need this ms instance to be registered with discovery
    registerWithEureka: true
    # Default url for eureka connections , can refer the same in eurekaserver config
    serviceUrl:
      defaultZone: http://localhost:8070/eureka

# desc info to be exposed via actuator endpoint to distinguish other microservices
info:
  app:
    name: "cards"
    description: "BankEasy microservice for customer cards"
    version: "1.0.0"

# activate debug logging
logging:
  level:
    feign: DEBUG
    org:
      springframework:
        cloud:
          openfeign: DEBUG
    com:
      bankeasy:
        cards: DEBUG
# log pattern for distributed tracing via open telemetry
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

# add config to ensure resilience 4j allows feign time to connect
resilience4j:
  timelimiter:
    instances:
      AccountsFeignClientfetchAccountString:
        timeoutDuration: 5s