server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb
    username: root
    password: root
# Here we ensure that the sql table scripts are always initialized on startup
  sql:
    init:
      mode: always
  jpa:
    show-sql: true
# Config server address for app to contactO
  config:
    import: "optional:configserver:http://localhost:8071/"
# Config details to connect to rabbit messaging queue
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

# management API endpoints are specific endpoints provided by spring and
# utilized via actuator which exposes them for use.
# One function is to perform refresh of configuration read from git post a change
# without having to restart the microservice
management:
  endpoints:
    web:
      exposure:
        include: "*"
#  enable acutator to expose info url
  info:
    env:
      enabled: true
# enable shutdown url of microservice
  endpoint:
    shutdown:
      access: unrestricted


# enable shutdown mechanism
endpoints:
  shutdown:
    enabled: true

# eureka props
eureka:
  instance:
# This property defines this microservice dynamically wrt Ip address when comms with other ms
# Since this is not localhost but rather the accounts microservice instance that we are referring here
    preferIpAddress: true
  client:
# We require registry details of all microservices for comms
    fetchRegistry : true
# We need this ms instance to be registered with discovery
    registerWithEureka: true
# Default url for eureka connections , can refer the same in eurekaserver config
    serviceUrl:
      defaultZone: http://localhost:8070/eureka

# desc info to be exposed via actuator endpoint to distinguish other microservices
info:
  app:
    name: "accounts"
    description: "BankEasy microservice for customer accounts"
    version: "1.0.0"

